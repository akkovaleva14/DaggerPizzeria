package com.example.daggerpizzeria.example_4

import androidx.appcompat.app.AppCompatActivity

class MainActivity4 : AppCompatActivity()

/*
Жизненный цикл внедрения зависимостей

Старт приложения (App4 создается):
Приложение запускается
Android создает экземпляр класса App4
Начинается процесс настройки зависимостей

Подготовка компонента (Создание DaggerAppComponent4):
Dagger генерирует компонент во время компиляции
Создается граф зависимостей на основе модулей
Определяются правила создания объектов Pizza и Sauce

Внедрение зависимостей:
Dagger анализирует класс App4
Находит поля, помеченные @Inject
Подготавливает механизм для ленивого внедрения lazyPizza
НО сам объект еще не создается!

Первый запрос зависимости (Первый вызов lazyPizza.get()):
Происходит первое обращение к lazyPizza
Dagger активирует механизм создания объекта
Начинается процесс создания зависимостей

Создание объектов (Создание Pizza и Sauce):
Сначала создается Sauce (TomatoSauceImpl)
Затем создается Pizza (PepperoniPizzaImpl) с использованием Sauce
Объекты создаются согласно правилам, описанным в модулях

Кэширование (Последующие вызовы возвращают тот же объект):
При повторных вызовах lazyPizza.get()
Возвращается тот же самый экземпляр Pizza
Гарантируется единственность объекта

Аналогия в реальном мире

Представьте этот процесс как заказ пиццы в ресторане:
Вы входите в ресторан (запуск приложения)
Официант (Dagger) готовит меню и заметки о рецептах (создание компонента)
Вы еще не заказали (внедрение зависимостей)
Когда вы делаете первый заказ (первый вызов .get())
Повар начинает готовить соус
Затем готовит пиццу с этим соусом
Если вы закажете такую же пиццу снова - получите точно такую же
 */